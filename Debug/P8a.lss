
P8a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800200  0000036e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010bd  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ced  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005a2  00000000  00000000  000022ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058b  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000607  00000000  00000000  00002eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000034f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 36       	cpi	r26, 0x60	; 96
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	2c c1       	rjmp	.+600    	; 0x36a <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:
*/
#include <avr/io.h>
#include "UART.h"

int main(void) 
{ 
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	64 97       	sbiw	r28, 0x14	; 20
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
	char cad[20];
	uint16_t num;
	UART0_Init(0);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	24 d0       	rcall	.+72     	; 0x176 <UART0_Init>
	while(1)
	{
		UART0_puts("\n\rUniversidad Autonoma de Baja California\n\r Practica 8a");
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	92 e0       	ldi	r25, 0x02	; 2
		UART0_puts("\n\n\rIntroduce un número:\n\r");
 132:	81 d0       	rcall	.+258    	; 0x236 <UART0_puts>
 134:	88 e3       	ldi	r24, 0x38	; 56
		UART0_gets(cad);
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	7e d0       	rcall	.+252    	; 0x236 <UART0_puts>
 13a:	ce 01       	movw	r24, r28
		num = atoi(cad);
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	44 d0       	rcall	.+136    	; 0x1c8 <UART0_gets>
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
		itoa(cad,num,10);
 144:	c3 d0       	rcall	.+390    	; 0x2cc <atoi>
 146:	8c 01       	movw	r16, r24
 148:	4a e0       	ldi	r20, 0x0A	; 10
 14a:	bc 01       	movw	r22, r24
		UART0_puts("\n\rDec:");
 14c:	ce 01       	movw	r24, r28
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	80 d0       	rcall	.+256    	; 0x252 <itoa>
		UART0_puts(cad);
 152:	82 e5       	ldi	r24, 0x52	; 82
 154:	92 e0       	ldi	r25, 0x02	; 2
		itoa(cad,num,2);
 156:	6f d0       	rcall	.+222    	; 0x236 <UART0_puts>
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	6c d0       	rcall	.+216    	; 0x236 <UART0_puts>
 15e:	42 e0       	ldi	r20, 0x02	; 2
		UART0_puts("\n\rBin:");
 160:	b8 01       	movw	r22, r16
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	75 d0       	rcall	.+234    	; 0x252 <itoa>
		UART0_puts(cad);	
 168:	89 e5       	ldi	r24, 0x59	; 89
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	64 d0       	rcall	.+200    	; 0x236 <UART0_puts>
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	61 d0       	rcall	.+194    	; 0x236 <UART0_puts>
 174:	dc cf       	rjmp	.-72     	; 0x12e <main+0x1a>

00000176 <UART0_Init>:
void UART0_Init(uint16_t mode)
{
	/*Función para inicializar el puerto serie del ATmega1280/2560 
	  Si mode es 0    9600,8,N,1
	  Si mode es 1    19200,8,N,1 */
	UCSR0A = (1<<U2X0);		//Usart double speed
 176:	22 e0       	ldi	r18, 0x02	; 2
 178:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|~(1<<UCSZ02); // Reception enable | Transmission enable | 9bit disable
 17c:	2b ef       	ldi	r18, 0xFB	; 251
 17e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);	//8bit enable
 182:	26 e0       	ldi	r18, 0x06	; 6
 184:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	if(!mode)
 188:	89 2b       	or	r24, r25
 18a:	39 f4       	brne	.+14     	; 0x19a <UART0_Init+0x24>
	{
		UBRR0 = 207;	//9600 baud rate UBRR
 18c:	8f ec       	ldi	r24, 0xCF	; 207
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 194:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 198:	08 95       	ret
	}else if(mode)
	{
		UBRR0 = 103;	//19.2k baud rate UBRR
 19a:	87 e6       	ldi	r24, 0x67	; 103
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 1a6:	08 95       	ret

000001a8 <UART0_getchar>:
	}
}	  
char UART0_getchar(void)
{	
	while ( !(UCSR0A & (1<<RXC0)) );
 1a8:	e0 ec       	ldi	r30, 0xC0	; 192
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	88 23       	and	r24, r24
 1b0:	ec f7       	brge	.-6      	; 0x1ac <UART0_getchar+0x4>
	return UDR0;
 1b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	
}
 1b6:	08 95       	ret

000001b8 <UART0_putchar>:
void UART0_putchar(char data)
{
	while ( !(UCSR0A & (1<<UDRE0)) );	
 1b8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	90 81       	ld	r25, Z
 1be:	95 ff       	sbrs	r25, 5
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <UART0_putchar+0x4>
	UDR0 = data;
 1c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 1c6:	08 95       	ret

000001c8 <UART0_gets>:
}
void UART0_gets(char *str)
{
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	7c 01       	movw	r14, r24
	unsigned char c;
	unsigned int i=0;
 1d4:	00 e0       	ldi	r16, 0x00	; 0
	do{
		c = UART0_getchar();
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	e7 df       	rcall	.-50     	; 0x1a8 <UART0_getchar>
		if( (i<=18)&&(c!=8)&&(c!=13) )	//validacion menor al fin del arreglo, backspace y enter
 1da:	c8 2f       	mov	r28, r24
 1dc:	03 31       	cpi	r16, 0x13	; 19
 1de:	11 05       	cpc	r17, r1
 1e0:	68 f4       	brcc	.+26     	; 0x1fc <UART0_gets+0x34>
 1e2:	88 30       	cpi	r24, 0x08	; 8
 1e4:	69 f0       	breq	.+26     	; 0x200 <UART0_gets+0x38>
		{
			UART0_putchar(c);
 1e6:	8d 30       	cpi	r24, 0x0D	; 13
 1e8:	f1 f0       	breq	.+60     	; 0x226 <UART0_gets+0x5e>
			*str++ = c;
 1ea:	e6 df       	rcall	.-52     	; 0x1b8 <UART0_putchar>
 1ec:	f7 01       	movw	r30, r14
			i++;
 1ee:	c0 83       	st	Z, r28
 1f0:	0f 5f       	subi	r16, 0xFF	; 255
	do{
		c = UART0_getchar();
		if( (i<=18)&&(c!=8)&&(c!=13) )	//validacion menor al fin del arreglo, backspace y enter
		{
			UART0_putchar(c);
			*str++ = c;
 1f2:	1f 4f       	sbci	r17, 0xFF	; 255
 1f4:	c7 01       	movw	r24, r14
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	7c 01       	movw	r14, r24
			i++;
		}
		if( (c==8) && (i>0) )		//validacion backspace
 1fa:	ee cf       	rjmp	.-36     	; 0x1d8 <UART0_gets+0x10>
 1fc:	88 30       	cpi	r24, 0x08	; 8
 1fe:	89 f4       	brne	.+34     	; 0x222 <UART0_gets+0x5a>
 200:	01 15       	cp	r16, r1
		{
			UART0_putchar('\b');
 202:	11 05       	cpc	r17, r1
			UART0_putchar(' ');
 204:	49 f3       	breq	.-46     	; 0x1d8 <UART0_gets+0x10>
 206:	88 e0       	ldi	r24, 0x08	; 8
			UART0_putchar(8);
 208:	d7 df       	rcall	.-82     	; 0x1b8 <UART0_putchar>
 20a:	80 e2       	ldi	r24, 0x20	; 32
 20c:	d5 df       	rcall	.-86     	; 0x1b8 <UART0_putchar>
			*str--='\0';
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	d3 df       	rcall	.-90     	; 0x1b8 <UART0_putchar>
			i--;
 212:	f7 01       	movw	r30, r14
 214:	10 82       	st	Z, r1
		if( (c==8) && (i>0) )		//validacion backspace
		{
			UART0_putchar('\b');
			UART0_putchar(' ');
			UART0_putchar(8);
			*str--='\0';
 216:	01 50       	subi	r16, 0x01	; 1
 218:	11 09       	sbc	r17, r1
 21a:	c7 01       	movw	r24, r14
 21c:	01 97       	sbiw	r24, 0x01	; 1
			i--;
		}
	}while(c != 13);
 21e:	7c 01       	movw	r14, r24
 220:	db cf       	rjmp	.-74     	; 0x1d8 <UART0_gets+0x10>
	*str = '\0';
 222:	8d 30       	cpi	r24, 0x0D	; 13
 224:	c9 f6       	brne	.-78     	; 0x1d8 <UART0_gets+0x10>
}
 226:	f7 01       	movw	r30, r14
 228:	10 82       	st	Z, r1
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	08 95       	ret

00000236 <UART0_puts>:
void UART0_puts(char *str)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ec 01       	movw	r28, r24
	while(*str)
 23c:	88 81       	ld	r24, Y
 23e:	88 23       	and	r24, r24
 240:	29 f0       	breq	.+10     	; 0x24c <UART0_puts+0x16>
	{
		UART0_putchar(*str++);
 242:	21 96       	adiw	r28, 0x01	; 1
	}while(c != 13);
	*str = '\0';
}
void UART0_puts(char *str)
{
	while(*str)
 244:	b9 df       	rcall	.-142    	; 0x1b8 <UART0_putchar>
 246:	89 91       	ld	r24, Y+
 248:	81 11       	cpse	r24, r1
	{
		UART0_putchar(*str++);
	}
}
 24a:	fc cf       	rjmp	.-8      	; 0x244 <UART0_puts+0xe>
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <itoa>:
void itoa(char *str, uint16_t number, uint8_t base)
{
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	fc 01       	movw	r30, r24
 25c:	9b 01       	movw	r18, r22
	unsigned int cociente, residuo,count = 0, i=0, j;
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	cociente = number;
	do{
		residuo = cociente%base;
 262:	04 2f       	mov	r16, r20
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <itoa+0x1a>
			c = residuo + 55;
		}else{
			c = residuo + '0'; //agregar el respectivo para crear el caracter de numero
		}
		*str++ = c;
		count++;
 268:	ec 01       	movw	r28, r24
		{
			c = residuo + 55;
		}else{
			c = residuo + '0'; //agregar el respectivo para crear el caracter de numero
		}
		*str++ = c;
 26a:	fd 01       	movw	r30, r26
{
	unsigned int cociente, residuo,count = 0, i=0, j;
	char c;
	cociente = number;
	do{
		residuo = cociente%base;
 26c:	c9 01       	movw	r24, r18
 26e:	b8 01       	movw	r22, r16
 270:	68 d0       	rcall	.+208    	; 0x342 <__udivmodhi4>
		cociente = cociente/base;
 272:	26 2f       	mov	r18, r22
 274:	37 2f       	mov	r19, r23
		if(residuo > 9)	//si es mayor a 9, agregar el respectivo para imprimir letra.
 276:	8a 30       	cpi	r24, 0x0A	; 10
 278:	91 05       	cpc	r25, r1
 27a:	10 f0       	brcs	.+4      	; 0x280 <itoa+0x2e>
		{
			c = residuo + 55;
 27c:	89 5c       	subi	r24, 0xC9	; 201
 27e:	01 c0       	rjmp	.+2      	; 0x282 <itoa+0x30>
		}else{
			c = residuo + '0'; //agregar el respectivo para crear el caracter de numero
 280:	80 5d       	subi	r24, 0xD0	; 208
		}
		*str++ = c;
 282:	df 01       	movw	r26, r30
 284:	11 96       	adiw	r26, 0x01	; 1
 286:	80 83       	st	Z, r24
		count++;
 288:	ce 01       	movw	r24, r28
 28a:	01 96       	adiw	r24, 0x01	; 1
	}while( cociente != 0 );	
 28c:	21 15       	cp	r18, r1
 28e:	31 05       	cpc	r19, r1
 290:	59 f7       	brne	.-42     	; 0x268 <itoa+0x16>
	*str= '\0';
 292:	11 82       	std	Z+1, r1	; 0x01
	str -=count;
 294:	a8 1b       	sub	r26, r24
 296:	b9 0b       	sbc	r27, r25
	j = count -1;
	//==============invertir cadena==================
	while(i < j)
 298:	20 97       	sbiw	r28, 0x00	; 0
 29a:	99 f0       	breq	.+38     	; 0x2c2 <itoa+0x70>
 29c:	fd 01       	movw	r30, r26
 29e:	a8 0f       	add	r26, r24
 2a0:	b9 1f       	adc	r27, r25
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
	{
		if( *(str+i) != *(str+j))
 2a6:	20 81       	ld	r18, Z
 2a8:	3e 91       	ld	r19, -X
 2aa:	23 17       	cp	r18, r19
 2ac:	11 f0       	breq	.+4      	; 0x2b2 <itoa+0x60>
		{
			c = *(str+i);
			*(str+i) = *(str+j);
 2ae:	30 83       	st	Z, r19
			*(str+j) = c;	
 2b0:	2c 93       	st	X, r18
		}
		i++;
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	31 96       	adiw	r30, 0x01	; 1
	}while( cociente != 0 );	
	*str= '\0';
	str -=count;
	j = count -1;
	//==============invertir cadena==================
	while(i < j)
 2b6:	9e 01       	movw	r18, r28
 2b8:	28 1b       	sub	r18, r24
 2ba:	39 0b       	sbc	r19, r25
 2bc:	82 17       	cp	r24, r18
 2be:	93 07       	cpc	r25, r19
 2c0:	90 f3       	brcs	.-28     	; 0x2a6 <itoa+0x54>
			*(str+j) = c;	
		}
		i++;
		j--;
	}
}	
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <atoi>:
unsigned int atoi(char *str)
{
	unsigned int num = 0, exp = 1, val, count = 0;
	//contando digitos en la cadena============
	while(*str)
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 81       	ld	r18, Z
 2d0:	22 23       	and	r18, r18
 2d2:	89 f1       	breq	.+98     	; 0x336 <atoi+0x6a>
 2d4:	31 96       	adiw	r30, 0x01	; 1
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	01 c0       	rjmp	.+2      	; 0x2de <atoi+0x12>
 2dc:	fa 01       	movw	r30, r20
	{
		str++;
 2de:	bf 01       	movw	r22, r30
		count++;
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	af 01       	movw	r20, r30
 2e4:	4f 5f       	subi	r20, 0xFF	; 255
 2e6:	5f 4f       	sbci	r21, 0xFF	; 255
}	
unsigned int atoi(char *str)
{
	unsigned int num = 0, exp = 1, val, count = 0;
	//contando digitos en la cadena============
	while(*str)
 2e8:	20 81       	ld	r18, Z
 2ea:	21 11       	cpse	r18, r1
 2ec:	f7 cf       	rjmp	.-18     	; 0x2dc <atoi+0x10>
	{
		str++;
		count++;
	}
	str--;	//no tomando en cuenta '\0'
	while(count != 0)
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	29 f1       	breq	.+74     	; 0x33c <atoi+0x70>
 2f2:	68 1b       	sub	r22, r24
 2f4:	79 0b       	sbc	r23, r25
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
	{
		val = *str--;	//tomando el valor
 2fe:	42 91       	ld	r20, -Z
 300:	50 e0       	ldi	r21, 0x00	; 0
		val = val - '0';	//obteniendo valor crudo
		num = num + (val * exp);	//almacenando valor crudo*exp en num
 302:	40 53       	subi	r20, 0x30	; 48
 304:	51 09       	sbc	r21, r1
 306:	42 9f       	mul	r20, r18
 308:	d0 01       	movw	r26, r0
 30a:	43 9f       	mul	r20, r19
 30c:	b0 0d       	add	r27, r0
 30e:	52 9f       	mul	r21, r18
 310:	b0 0d       	add	r27, r0
 312:	11 24       	eor	r1, r1
 314:	8a 0f       	add	r24, r26
 316:	9b 1f       	adc	r25, r27
		exp = exp*10;
 318:	a9 01       	movw	r20, r18
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	24 0f       	add	r18, r20
 32c:	35 1f       	adc	r19, r21
	{
		str++;
		count++;
	}
	str--;	//no tomando en cuenta '\0'
	while(count != 0)
 32e:	e6 17       	cp	r30, r22
 330:	f7 07       	cpc	r31, r23
 332:	29 f7       	brne	.-54     	; 0x2fe <atoi+0x32>
 334:	08 95       	ret
		j--;
	}
}	
unsigned int atoi(char *str)
{
	unsigned int num = 0, exp = 1, val, count = 0;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	08 95       	ret
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
		num = num + (val * exp);	//almacenando valor crudo*exp en num
		exp = exp*10;
		count--;	
	}
	return num;
 340:	08 95       	ret

00000342 <__udivmodhi4>:
 342:	aa 1b       	sub	r26, r26
 344:	bb 1b       	sub	r27, r27
 346:	51 e1       	ldi	r21, 0x11	; 17
 348:	07 c0       	rjmp	.+14     	; 0x358 <__udivmodhi4_ep>

0000034a <__udivmodhi4_loop>:
 34a:	aa 1f       	adc	r26, r26
 34c:	bb 1f       	adc	r27, r27
 34e:	a6 17       	cp	r26, r22
 350:	b7 07       	cpc	r27, r23
 352:	10 f0       	brcs	.+4      	; 0x358 <__udivmodhi4_ep>
 354:	a6 1b       	sub	r26, r22
 356:	b7 0b       	sbc	r27, r23

00000358 <__udivmodhi4_ep>:
 358:	88 1f       	adc	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	5a 95       	dec	r21
 35e:	a9 f7       	brne	.-22     	; 0x34a <__udivmodhi4_loop>
 360:	80 95       	com	r24
 362:	90 95       	com	r25
 364:	bc 01       	movw	r22, r24
 366:	cd 01       	movw	r24, r26
 368:	08 95       	ret

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
